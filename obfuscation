import argparse
import html
import urllib.parse

def html_encode(payload):
    """Encode special HTML characters."""
    return html.escape(payload)

def url_encode(payload):
    """URL encode the payload."""
    return urllib.parse.quote(payload)

def js_escape(payload):
    """Escape JavaScript special characters."""
    replacements = {
        '\x22': '\\x22',  # "
        '\x27': '\\x27',  # '
        '\x3c': '\\x3c',  # <
        '\x3e': '\\x3e',  # >
        '\x2f': '\\x2f',  # /
        '\x5c': '\\x5c',  # \
    }
    for char, replacement in replacements.items():
        payload = payload.replace(char, replacement)
    return payload

def double_encode(payload):
    """Apply URL encoding followed by HTML encoding."""
    url_encoded = url_encode(payload)
    return html_encode(url_encoded)

def js_concat(payload):
    """Break payload into parts and concatenate using JavaScript."""
    parts = payload.split()
    return ' + '.join([f'"{part}"' for part in parts])

def css_encode(payload):
    """Encode payload for use in CSS."""
    return payload.replace("'", "\\27 ").replace('"', "\\22 ").replace('(', "\\28 ").replace(')', "\\29 ")

def hex_encode(payload):
    """Hex encode the payload."""
    return ''.join(f'\\x{ord(c):02x}' for c in payload)

def html_attr_encode(payload):
    """Encode payload for use in HTML attributes."""
    return html_encode(payload).replace('"', '&#34;').replace("'", '&#39;')

def js_unicode_encode(payload):
    """Encode payload using Unicode escape sequences."""
    return ''.join(f'\\u{ord(c):04x}' for c in payload)

def css_hex_encode(payload):
    """Encode payload using hexadecimal values suitable for CSS."""
    return ''.join(f'\\{ord(c):02x}' for c in payload)

def js_char_entity_encode(payload):
    """Encode payload using JavaScript character entities."""
    return ''.join(f'\\u{ord(c):04x}' if ord(c) > 127 else c for c in payload)

def obfuscate_payload(payload, method):
    """Obfuscate payload based on the selected method."""
    if method == 'html':
        return html_encode(payload)
    elif method == 'url':
        return url_encode(payload)
    elif method == 'js':
        return js_escape(payload)
    elif method == 'double':
        return double_encode(payload)
    elif method == 'js_concat':
        return js_concat(payload)
    elif method == 'css':
        return css_encode(payload)
    elif method == 'hex':
        return hex_encode(payload)
    elif method == 'html_attr':
        return html_attr_encode(payload)
    elif method == 'js_unicode':
        return js_unicode_encode(payload)
    elif method == 'css_hex':
        return css_hex_encode(payload)
    elif method == 'js_char_entity':
        return js_char_entity_encode(payload)
    else:
        raise ValueError("Unsupported obfuscation method. Choose 'html', 'url', 'js', 'double', 'js_concat', 'css', 'hex', 'html_attr', 'js_unicode', 'css_hex', or 'js_char_entity'.")

def process_payloads(file_path, method):
    """Apply obfuscation to payloads read from a file."""
    obfuscated_payloads = []
    with open(file_path, 'r') as file:
        for line in file:
            payload = line.strip()
            obfuscated_payloads.append(obfuscate_payload(payload, method))
    return obfuscated_payloads

def main():
    parser = argparse.ArgumentParser(description="Obfuscate XSS payloads from a file.")
    parser.add_argument('-l', '--list', required=True, help="Path to the file containing the list of payloads.")
    parser.add_argument('-e', '--encoding', required=True, choices=['html', 'url', 'js', 'double', 'js_concat', 'css', 'hex', 'html_attr', 'js_unicode', 'css_hex', 'js_char_entity'], help="Obfuscation method to apply.")
    parser.add_argument('-o', '--output', required=False, help="Path to the output file to save the obfuscated payloads.")

    args = parser.parse_args()

    obfuscated_payloads = process_payloads(args.list, args.encoding)

    if args.output:
        with open(args.output, 'w') as file:
            for payload in obfuscated_payloads:
                file.write(f"{payload}\n")
        print(f"Obfuscated payloads saved to {args.output}")
    else:
        for original, obfuscated in zip(open(args.list, 'r'), obfuscated_payloads):
            print(f"Original: {original.strip()}")
            print(f"Obfuscated: {obfuscated}")
            print()

if __name__ == "__main__":
    main()
